# DEL_NAMESPACES(ns [, ns ... ])
#
# Delete namespaces from the running OS
m4_define([DEL_NAMESPACES],
   [m4_foreach([ns], [$@],
               [ip netns del ns
])
   ]
)

# ADD_NAMESPACES(ns [, ns ... ])
#
# Add new namespaces, if ns exists, the old one
# will be remove before new ones are installed.
m4_define([ADD_NAMESPACES],
   [m4_foreach([ns], [$@],
               [DEL_NAMESPACES(ns)
                AT_CHECK([ip netns add ns])
		on_exit 'DEL_NAMESPACES(ns)'
               ])
   ]
)

# NS_EXEC([namespace], [command])
#
# Execute 'command' in 'namespace'
m4_define([NS_EXEC],
    [ip netns exec $1 sh << NS_EXEC_HEREDOC
$2
NS_EXEC_HEREDOC])

# NS_CHECK_EXEC([namespace], [command], other_params...)
#
# Wrapper for AT_CHECK that executes 'command' inside 'namespace'.
# 'other_params' as passed as they are to AT_CHECK.
m4_define([NS_CHECK_EXEC],
    [ AT_CHECK([NS_EXEC([$1], [$2])], m4_shift(m4_shift($@))) ]
)

# ADD_BR([name], [vsctl-args])
#
# Expands into the proper ovs-vsctl commands to create a bridge with the
# appropriate type, and allows additional arguments to be passed.
m4_define([ADD_BR], [ovs-vsctl _ADD_BR([$1]) -- $2])

# ADD_VETH([port], [namespace], [ovs-br], [ip_addr])
#
# Add a pair of veth ports. 'port' will be added to name space 'namespace',
# and "ovs-'port'" will be added to ovs bridge 'ovs-br'.
#
# The 'port' in 'namespace' will be brought up with static IP address
# with 'ip_addr' in CIDR notation.
#
# The existing 'port' or 'ovs-port' will be removed before new ones are added.
#
m4_define([ADD_VETH],
    [ AT_CHECK([ip link add $1 type veth peer name ovs-$1])
      AT_CHECK([ip link set $1 netns $2])
      AT_CHECK([ip link set dev ovs-$1 up])
      AT_CHECK([ovs-vsctl add-port $3 ovs-$1])
      NS_CHECK_EXEC([$2], [ip addr add $4 dev $1])
      NS_CHECK_EXEC([$2], [ip link set dev $1 up])
      on_exit 'ip link del ovs-$1'
    ]
)

# ADD_VLAN([port], [namespace], [vlan-id], [ip-addr])
#
# Add a VLAN device named 'port' within 'namespace'. It will be configured
# with the ID 'vlan-id' and the address 'ip-addr'.
m4_define([ADD_VLAN],
    [ NS_CHECK_EXEC([$2], [ip link add link $1 name $1.$3 type vlan id $3])
      NS_CHECK_EXEC([$2], [ip link set dev $1.$3 up])
      NS_CHECK_EXEC([$2], [ip addr add dev $1.$3 $4])
    ]
)

# ADD_OVS_TUNNEL([type], [bridge], [port], [remote-addr], [overlay-addr])
#
# Add an ovs-based tunnel device in the root namespace, with name 'port' and
# type 'type'. The tunnel device will be configured as point-to-point with the
# 'remote-addr' as the underlay address of the remote tunnel endpoint.
#
# 'port will be configured with the address 'overlay-addr'.
#
m4_define([ADD_OVS_TUNNEL],
   [AT_CHECK([ovs-vsctl add-port $2 $3 -- \
              set int $3 type=$1 options:remote_ip=$4])
    AT_CHECK([ip addr add dev $2 $5])
    AT_CHECK([ip link set dev $2 up])
    AT_CHECK([ip link set dev $2 mtu 1450])
    on_exit 'ip addr del dev $2 $5'
   ]
)

# ADD_NATIVE_TUNNEL([type], [port], [namespace], [remote-addr], [overlay-addr],
#                   [link-args])
#
# Add a native tunnel device within 'namespace', with name 'port' and type
# 'type'. The tunnel device will be configured as point-to-point with the
# 'remote-addr' as the underlay address of the remote tunnel endpoint (as
# viewed from the perspective of that namespace).
#
# 'port' will be configured with the address 'overlay-addr'. 'link-args' is
# made available so that additional arguments can be passed to "ip link",
# for instance to configure the vxlan destination port.
#
m4_define([ADD_NATIVE_TUNNEL],
   [NS_CHECK_EXEC([$3], [ip link add dev $2 type $1 remote $4 $6])
    NS_CHECK_EXEC([$3], [ip addr add dev $2 $5])
    NS_CHECK_EXEC([$3], [ip link set dev $2 up])
    NS_CHECK_EXEC([$3], [ip link set dev $2 mtu 1450])
   ]
)

# FORMAT_PING([])
#
# Strip variant pieces from ping output so the output can be reliably compared.
#
m4_define([FORMAT_PING], [grep "transmitted" | sed 's/time.*ms$/time 0ms/'])
